————————————————————————————————
			实用小贴士
————————————————————————————————
内建的图形化 git：
gitk
彩色的 git 输出：
git config color.ui true
显示历史记录时，每个提交的信息只显示一行：
git config format.pretty oneline
交互式添加文件到暂存区：
git add -i
查看暂存区文件：
git ls-files
文件移除暂存区
git rm --cached  +文件名(cmd)

git config user.name/git config --global user.name
git config user.email/git config --gloabl user.email
git remote -v
git remote rm origin
git remote add origin XXXX

撤销合并
git reset --hard HEAD~
指定克隆版本
git clone --branch x.x.x https://xxx.xxx.com/xxx/xxx.git
//创建分支，获取指定版本的分支
git branch <新分支名> 8778aab82bc602d2d52a020df009b6b9ba401677
————————————————————————————————



————————————————————————————————
			Hint
————————————————————————————————
空文件夹没法提交
!检出后未提交的更改会消失 .一般在没有具体指向的时候使用，如add .;checkout.

————————————————————————————————

————————————————————————————————
			主要命令
————————————————————————————————

git add 			# 将工作区的修改提交到暂存区
git commit	 		# 将暂存区的修改提交到当前分支
git reset 			# 回退到某一个版本
git revert 			# 回退某个修改
git stash 			# 保存某次修改
git pull 			# 从远程更新代码
git push 			# 将本地代码更新到远程分支上
git reflog 			# 查看历史命令
git log 			# 查看提交历史
git status 			# 查看当前仓库的状态
git diff 			# 查看修改
git remote			# 远程
git merge			# 合并分支 

————————————————————————————————


————————————————————————————————
			必须技巧
————————————————————————————————

一键清理更改			#git checkout .
创建一个空文件(忽略文件)	
					#touch .gitignore(cmd)
删除文件 			#rm file(cmd)

————————————————————————————————


————————————————————————————————
			git add 添加
————————————————————————————————

删除文件后需要 git add -A, 光 git add. 不行，区别如下：

git add -A 
			# 保存所有的修改
git add . 
			# 保存新的添加和修改，但是不包括删除
git add -u 
			# 保存修改和删除，但是不包括新建文件。所以默认使用git add -A就行
git rm --cached 文件 
			# 从缓存区去除
			可以添加所有后选择性的删除内容

————————————————————————————————


————————————————————————————————
			git commit 提交
————————————————————————————————

git commit –m “本次提交描述”
	# 该命令会将git add .存入暂存区修改内容提交至本地仓库中，
	若文件未添加至暂存区，则提交时不会提交任何修改。
git commit -a
	# 相当于运行 git add -u把所有当前目录下的文件加入缓存区域再
	运行git commit.注意！对于新增的文件，并没有被commit
git commit –am “本次提交描述”
git commit –a –m“本次提交描述”
	# 等同于上面的-a和-m
git commit --amend
	# 修改最近一次提交。有时候如果提交注释书写有误或者漏提文件，
	可以使用此命令。对于漏提交的文件，需要git add到缓存区之后，
	git commit --amend才能将修改追加到最近的一次提交上。

————————————————————————————————


————————————————————————————————
			git checkout 检出
————————————————————————————————

git checkout 分支名
			# 切换到某分支
git checkout -b 分支名
			# 创建新分支并切换
git chackout .
			# 重置该分支内容

————————————————————————————————


————————————————————————————————
			git branch 分支
————————————————————————————————

git branch
			# 显示当前存在的本地分支
git branch 分支名
			# 创建一个分支
git branch -d 分支名
			# 删除分支


————————————————————————————————


————————————————————————————————
			git push 推送
————————————————————————————————

git push -u origin master    
			# 第一次推送时
git push origin 分支名  
			# 第一次推送后，直接使用该命令即可推送修改

————————————————————————————————



————————————————————————————————
			git reset 回退
————————————————————————————————



————————————————————————————————


————————————————————————————————
			git remote 远端
————————————————————————————————

git remote add origin 你的远程库地址
			# 把本地库与远程库关联
git remote -v
			# 查看远端地址
git remote 
			# 查看远端仓库名
git remote set-url 远端仓库名 链接
			# 更换地址
git remote rm 远端仓库名
			# 删掉远程仓库
git remote add 远端仓库名 链接
			# 添加地址

————————————————————————————————


————————————————————————————————
			git stash 暂存
————————————————————————————————

git stash
			# 将当前改动暂存
git stash pop
			# 将先前暂存的改动弹出

————————————————————————————————


————————————————————————————————
			.gitignore忽略规则
————————————————————————————————
在 .gitignore 文件中，每一行的忽略规则的语法如下：
1、空格不匹配任意文件，可作为分隔符，可用反斜杠转义

2、以“＃”开头的行都会被 Git 忽略。即#开头的文件标识注释，可以使用反斜杠进行转义。

3、可以使用标准的glob模式匹配。所谓的glob模式是指shell所使用的简化了的正则表达式。

4、以斜杠"/"开头表示目录；"/"结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件；"/"开始的模式匹配项目跟目录；如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录。

5、以星号"*"通配多个字符，即匹配多个任意字符；使用两个星号"**" 表示匹配任意中间目录，比如a/**/z可以匹配 a/z, a/b/z 或 a/b/c/z等。

6、以问号"?"通配单个字符，即匹配一个任意字符；

7、以方括号"[]"包含单个字符的匹配列表，即匹配任何一个列在方括号中的字符。比如[abc]表示要么匹配一个a，要么匹配一个b，要么匹配一个c；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配。比如[0-9]表示匹配所有0到9的数字，[a-z]表示匹配任意的小写字母）。

8、以叹号"!"表示不忽略(跟踪)匹配到的文件或目录，即要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。需要特别注意的是：如果文件的父目录已经被前面的规则排除掉了，那么对这个文件用"!"规则是不起作用的。也就是说"!"开头的模式表示否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用"!"也不会再次被包含。可以使用反斜杠进行转义。


当目录被忽略时添加文件需要加上 -f 强制添加	
git add -f node_modules/jquery/dist/jquery.min.js


。。。。。。。。。。。。。。。。。。。。。。。。。。提示
git对于.ignore配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；



*.a             表示忽略所有 .a 结尾的文件
!lib.a          表示但lib.a除外
/TODO           表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
build/          表示忽略 build/目录下的所有文件，过滤整个build文件夹；
doc/*.txt       表示会忽略doc/notes.txt但不包括 doc/server/arch.txt
 
bin/:           表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件
/bin:           表示忽略根目录下的bin文件
/*.c:           表示忽略cat.c，不忽略 build/cat.c
debug/*.obj:    表示忽略debug/io.obj，不忽略 debug/common/io.obj和tools/debug/io.obj
**/foo:         表示忽略/foo,a/foo,a/b/foo等
a/**/b:         表示忽略a/b, a/x/b,a/x/y/b等
!/bin/run.sh    表示不忽略bin目录下的run.sh文件
*.log:          表示忽略所有 .log 文件
config.php:     表示忽略当前路径的 config.php 文件
 
/mtk/           表示过滤整个文件夹
*.zip           表示过滤所有.zip文件
/mtk/do.c       表示过滤某个具体文件


需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中，如下：
!*.zip
!/mtk/one.txt

还有一些规则如下：
fd1/*
说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；
 
/fd1/*
说明：忽略根目录下的 /fd1/ 目录的全部内容；
 
/*
!.gitignore
!/fw/ 
/fw/*
!/fw/bin/
!/fw/sf/
说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；注意要先对bin/的父目录使用!规则，使其不被排除。
————————————————————————————————


————————————————————————————————
			创建->提交->推送
————————————————————————————————

git init   // 初始化版本库

git add .   // 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 

git commit -m "first commit" // 把添加的文件提交到版本库，并填写提交备注
————————————————————————————————


————————————————————————————————
			git log 日志
————————————————————————————————
git log  
	查看 当前分支的 提交历史
git log  --author=作者
	--author 仅显示指定作者相关的提交。
git log --stat
	仅简要的显示 文件 增改行数统计，每个提交都列出了修改过的文件
git log -p -2
	选项 展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新
git log -n2
	指定显示最新的几条记录
git log --graph --all
git log --n2 --all
	查看所有分支的提交修改
git log --graph --all --oneline
	如果要再简化观看流程，可以再加上--oneline属性，一个commit只显示一行。
--all
	查看所有
--graph
	图形化显示
--oneline
	显示演变历史
————————————————————————————————


————————————————————————————————
			origin 远程分支
————————————————————————————————
远程先开好分支然后拉到本地
git checkout -b feature-branch origin/feature-branch    //检出远程的feature-branch分支到本地
本地先开好分支然后推送到远程
$  git checkout -b feature-branch    //创建并切换到分支feature-branch  
$  git push origin feature-branch:feature-branch    //推送本地的feature-branch(冒号前面的)分支到远程origin的feature-branch(冒号后面的)分支(没有会自动创建)
————————————————————————————————













————————————————————————————————
			git
————————————————————————————————

usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

以下是在各种情况下使用的常见Git命令:

开始一个工作区域(参见:git help tutorial)
    clone             	Clone a repository into a new directory
		将存储库克隆到新目录中
    init              	Create an empty Git repository or reinitialize an existing one
		创建一个空的Git存储库或重新初始化一个现有的存储库

处理当前的更改(参见:git help everyday)
    add		Add file contents to the index
		将文件内容添加到索引中
    mv                	Move or rename a file, a directory, or a symlink
		移动或重命名文件、目录或符号链接
    restore           	Restore working tree files
		恢复工作树文件
    rm                	Remove files from the working tree and from the index
		从工作树和索引中删除文件
    sparse-checkout  	Initialize and modify the sparse-checkout
		初始化和修改sparse-checkout

检查历史记录和状态(参见:git help revision)
    bisect          	Use binary search to find the commit that introduced a bug
		使用二分查找查找引入错误的提交
    diff              	Show changes between commits, commit and working tree, etc
		显示提交、提交和工作树等之间的更改
    grep              	Print lines matching a pattern
		将符合样式的该行列出
    log              	Show commit logs
		显示提交日志
    show              	Show various types of objects
		显示各种类型的对象
    status            	Show the working tree status
		显示工作树状态

发展，标记和调整你的共同历史
    branch            	List, create, or delete branches
    		列出、创建或删除分支
    commit            	Record changes to the repository
    		记录对存储库的更改
    merge             	Join two or more development histories together
    		将两个或更多的发展历史结合在一起
    rebase            	Reapply commits on top of another base tip
    		在另一个基本tip上重新应用提交
    reset             	Reset current HEAD to the specified state
    		将当前HEAD重置为指定的状态
    switch            	Switch branches
		切换分支
    tag               	Create, list, delete or verify a tag object signed with GPG
		创建、列出、删除或验证用GPG签名的标记对象

协作(参见:git help workflow)
    fetch             	Download objects and refs from another repository
		从另一个存储库下载对象和引用
    pull              	Fetch from and integrate with another repository or a local branch
    拉取		从另一个存储库或本地分支获取并与之集成
    push              	Update remote refs along with associated objects
    推送		更新远程引用和相关对象

'git help -a'和'git help -g'列出可用的子命令和一些概念指南。
查看'git help <command>'或'git help <concept>'以了解具体的子命令或概念。
查看'git help git'获取系统概述。
————————————————————————————————















git reset
————————————————————————————————
————————————————————————————————
————————————————————————————————

git clone --depth=1

find  . -name '*.meta' -type f -delete
$ git rm --cached LeqiGames

0.954


与SVN的区别
Git与你熟悉的大部分版本控制系统的差别是很大的。也许你熟悉Subversion、CVS、Perforce、Mercurial 等等，他们
使用 “增量文件系统” （Delta Storage systems）, 就是说它们存储每次提交(commit)之间的差异。Git正好与之相反，
它会把你的每次提交的文件的全部内容（snapshot）都会记录下来。这会是在使用Git时的一个很重要的理念。