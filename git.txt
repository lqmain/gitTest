————————————————————————————————
			实用小贴士
————————————————————————————————
内建的图形化 git：
gitk
彩色的 git 输出：
git config color.ui true
显示历史记录时，每个提交的信息只显示一行：
git config format.pretty oneline
交互式添加文件到暂存区：
git add -i
查看暂存区文件：
git ls-files
文件移除暂存区
git rm --cached  +文件名

git config user.name/git config --global user.name
git config user.email/git config --gloabl user.email
git remote -v
git remote rm origin
git remote add origin XXXX

撤销合并
git reset --hard HEAD~
指定克隆版本
git clone --branch x.x.x https://xxx.xxx.com/xxx/xxx.git
//创建分支，获取指定版本的分支
git branch <新分支名> 8778aab82bc602d2d52a020df009b6b9ba401677
————————————————————————————————



————————————————————————————————
			Hint
————————————————————————————————
空文件夹没法提交
检出后未提交的更改会消失
————————————————————————————————

————————————————————————————————
			主要命令
————————————————————————————————

git add 			# 将工作区的修改提交到暂存区
git commit	 	# 将暂存区的修改提交到当前分支
git reset 			# 回退到某一个版本
git stash 			# 保存某次修改
git pull 			# 从远程更新代码
git push 			# 将本地代码更新到远程分支上
git reflog 			# 查看历史命令
git status 			# 查看当前仓库的状态
git diff 			# 查看修改
git log 			# 查看提交历史
git revert 			# 回退某个修改
git remote		#远程

————————————————————————————————


————————————————————————————————
			git add 添加
————————————————————————————————

删除文件后需要 git add -A, 光 git add. 不行，区别如下：

git add -A 保存所有的修改
git add . 保存新的添加和修改，但是不包括删除
git add -u 保存修改和删除，但是不包括新建文件。
所以默认使用git add -A就行

————————————————————————————————


————————————————————————————————
			git commit 提交
————————————————————————————————

git commit –m “本次提交描述”
	# 该命令会将git add .存入暂存区修改内容提交至本地仓库中，
	若文件未添加至暂存区，则提交时不会提交任何修改。
git commit -a
	相当于运行 git add -u把所有当前目录下的文件加入缓存区域再
	运行git commit.注意！对于新增的文件，并没有被commit
git commit –am “本次提交描述”
git commit –a –m“本次提交描述”
	等同于上面的-a和-m
git commit --amend
	修改最近一次提交。有时候如果提交注释书写有误或者漏提文件，
	可以使用此命令。对于漏提交的文件，需要git add到缓存区之后，
	git commit --amend才能将修改追加到最近的一次提交上。

————————————————————————————————



————————————————————————————————
			git reset 回退
————————————————————————————————

————————————————————————————————




————————————————————————————————
			git log 日志
————————————————————————————————
git log  
	查看 当前分支的 提交历史
git log  --author=作者
	--author 仅显示指定作者相关的提交。
git log --stat
	仅简要的显示 文件 增改行数统计，每个提交都列出了修改过的文件
git log -p -2
	选项 展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新
git log -n2
	指定显示最新的几条记录
git log --graph --all
git log --n2 --all
	查看所有分支的提交修改
git log --graph --all --oneline
	如果要再简化观看流程，可以再加上--oneline属性，一个commit只显示一行。
--all
	查看所有
--graph
	图形化显示
--oneline
	显示演变历史
————————————————————————————————


————————————————————————————————
			git
————————————————————————————————

usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

以下是在各种情况下使用的常见Git命令:

开始一个工作区域(参见:git help tutorial)
    clone             	Clone a repository into a new directory
		将存储库克隆到新目录中
    init              	Create an empty Git repository or reinitialize an existing one
		创建一个空的Git存储库或重新初始化一个现有的存储库

处理当前的更改(参见:git help everyday)
    add		Add file contents to the index
		将文件内容添加到索引中
    mv                	Move or rename a file, a directory, or a symlink
		移动或重命名文件、目录或符号链接
    restore           	Restore working tree files
		恢复工作树文件
    rm                	Remove files from the working tree and from the index
		从工作树和索引中删除文件
    sparse-checkout  	Initialize and modify the sparse-checkout
		初始化和修改sparse-checkout

检查历史记录和状态(参见:git help revision)
    bisect          	Use binary search to find the commit that introduced a bug
		使用二分查找查找引入错误的提交
    diff              	Show changes between commits, commit and working tree, etc
		显示提交、提交和工作树等之间的更改
    grep              	Print lines matching a pattern
		将符合样式的该行列出
    log              	Show commit logs
		显示提交日志
    show              	Show various types of objects
		显示各种类型的对象
    status            	Show the working tree status
		显示工作树状态

发展，标记和调整你的共同历史
    branch            	List, create, or delete branches
    		列出、创建或删除分支
    commit            	Record changes to the repository
    		记录对存储库的更改
    merge             	Join two or more development histories together
    		将两个或更多的发展历史结合在一起
    rebase            	Reapply commits on top of another base tip
    		在另一个基本tip上重新应用提交
    reset             	Reset current HEAD to the specified state
    		将当前HEAD重置为指定的状态
    switch            	Switch branches
		切换分支
    tag               	Create, list, delete or verify a tag object signed with GPG
		创建、列出、删除或验证用GPG签名的标记对象

协作(参见:git help workflow)
    fetch             	Download objects and refs from another repository
		从另一个存储库下载对象和引用
    pull              	Fetch from and integrate with another repository or a local branch
    拉取		从另一个存储库或本地分支获取并与之集成
    push              	Update remote refs along with associated objects
    推送		更新远程引用和相关对象

'git help -a'和'git help -g'列出可用的子命令和一些概念指南。
查看'git help <command>'或'git help <concept>'以了解具体的子命令或概念。
查看'git help git'获取系统概述。
————————————————————————————————















git reset
————————————————————————————————
————————————————————————————————
————————————————————————————————

git clone --depth=1

find  . -name '*.meta' -type f -delete
$ git rm --cached LeqiGames

0.954


与SVN的区别
Git与你熟悉的大部分版本控制系统的差别是很大的。也许你熟悉Subversion、CVS、Perforce、Mercurial 等等，他们
使用 “增量文件系统” （Delta Storage systems）, 就是说它们存储每次提交(commit)之间的差异。Git正好与之相反，
它会把你的每次提交的文件的全部内容（snapshot）都会记录下来。这会是在使用Git时的一个很重要的理念。